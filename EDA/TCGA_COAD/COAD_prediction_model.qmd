---
title: 'Colon Adenocarcinoma (COAD) EDA: Build phenotype prediction model'
author: "Sehyun Oh"
date: "`r format(Sys.time(), '%B %d, %Y')`"
format:
    html:
        fontsize: 14pxs
        toc: true
        top-depth: 3
output: html_document
---

# Initial Setup
## Load packages
```{r packages, warning=FALSE, message=FALSE}
suppressPackageStartupMessages({
    library(tidyverse)
    library(caret)
    library(pROC)
})
```

## Load data
```{r}
## Sample scores for the train set (80% of the randomly selected COAD samples)
## Only the top 15 validated RAVs
sampleScore_sub <- read.csv("data/sampleScore_train.csv", row.names = 1) # 261 samples x 15 RAVs

## Training set's metadata: character variables
charTb <- read.csv("data/meta_train_char.csv", row.names = 1) # 261 samples x 182 metadata attributes (char)

## All the metadata for training data with >10% completeness (for color)
meta_train <- read.csv("data/meta_train_all.csv", row.names = 1) # 261 samples x 869 metadata attributes (>10% complete)

## Convert character variables into the `factor` data type
factorTb <- charTb
factorTb[sapply(factorTb, is.character)] <- lapply(factorTb[sapply(factorTb, is.character)], factor)
```

## Custom functions
```{r}
source("R/evaluateRFmodel.R")
```

# Prediction models
## Random Forest classification model
```{r}
validated_RAVs <- c("RAV188", "RAV832", "RAV579", "RAV1166", "RAV220")
# target_attr <- "patient.lymphatic_invasion"
# target_RAVs <- c("RAV220", "RAV833", "RAV1575", validated_RAVs) %>% unique
target_attr <- "patient.bcr_canonical_check.bcr_patient_canonical_status"
target_RAVs <- c("RAV1302", "RAV517", validated_RAVs) %>% unique
# target_attr <- "pathologic_stage"
# target_RAVs <- c("RAV832", "RAV61", "RAV834")

labels <- factorTb[[target_attr]]
nonNALabels <- which(!is.na(labels))
data <- sampleScore_sub[,target_RAVs]

train_data <- data[nonNALabels,]
train_labels <- labels[nonNALabels]

set.seed(1234)
evaluateRFmodel(data = t(train_data), labels = train_labels)
```

Single RAV model
```{r}
evaluateRFmodel(data = t(train_data)[1,,drop=FALSE], labels = train_labels)
```

